{"version":3,"file":"static/js/831.df4c1a3a.chunk.js","mappings":"uKAGA,MA2BA,EA3BsBA,KACpB,MAAMC,GAAWC,EAAAA,EAAAA,OACVC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,CAAC,GAsBpC,OAVAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAeN,EAASO,SAASC,MAAM,KAAKC,QAAQC,GAAMA,IAC1DC,EAAY,CAAEC,KAAM,KACd,OAAZN,QAAY,IAAZA,GAAAA,EAAcO,SAAQ,CAACC,EAAMC,KAC3B,MAAMC,EAAWV,EAAaW,MAAM,EAAGF,EAAI,GACrCG,EAfWJ,KAAU,IAADK,EAC5B,OACa,QADbA,EAAOL,EACJN,MAAM,YAAI,IAAAW,OAAA,EADNA,EAEHC,KACCC,GACCA,EAAEC,OAAO,GAAGC,cAAgBF,EAAEG,UAAUP,MAAM,GAAGQ,sBAEpDC,KAAK,IAAI,EAQYC,CAAYb,GAClCH,EAAUO,GAAiB,IAAMF,EAASU,KAAK,IAAI,IAErDvB,EAASQ,EAAU,GAClB,CAACX,EAASO,WACN,CAACL,QAAM,E,aCvBhB,MAkBA,EAlBmB0B,KAAO,IAADC,EACvB,MAAM,MAAC3B,GAASH,IAChB,OACE+B,EAAAA,EAAAA,KAAA,OAAAC,SACqB,QADrBF,EACGG,OAAOC,KAAK/B,UAAM,IAAA2B,OAAA,EAAlBA,EAAoBT,KAAI,CAACN,EAAMC,KAE5BmB,EAAAA,EAAAA,MAAA,QAAAH,SAAA,EACED,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACC,GAAIlC,EAAMY,GAAOuB,UAAU,aAAYN,SAC1CjB,IAEF,YAIH,ECHV,EAZqBwB,IAA8B,IAA7B,MAAEC,EAAK,aAAEC,GAAcF,EAI3C,OACEJ,EAAAA,EAAAA,MAAA,SAAOG,UAAU,SAAQN,SAAA,EACvBD,EAAAA,EAAAA,KAAA,SAAOW,KAAK,WAAWC,QAASH,EAAOI,SALdC,KAC3BJ,GAAcD,EAAM,KAKlBT,EAAAA,EAAAA,KAAA,QAAMO,UAAU,mBACV,EC8BZ,EAnCeQ,KAAO,IAADC,EACnB,MAAM9C,GAAWC,EAAAA,EAAAA,MACX8C,GAAWC,EAAAA,EAAAA,MACXC,EAAmD,QAApCH,EAAGI,aAAaC,QAAQ,oBAAY,IAAAL,GAAAA,GAClDM,EAAUC,IAAejD,EAAAA,EAAAA,UAAS6C,GAUzC,OARA5C,EAAAA,EAAAA,YAAU,KACRiD,SAASC,gBAAgBC,aACvB,aACAJ,EAAW,OAAS,SAEtBF,aAAaO,QAAQ,YAAaL,EAAS,GAC1C,CAACA,KAGFlB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,aAAYN,SAAA,EACzBG,EAAAA,EAAAA,MAAA,UAAQG,UAAU,SAAQN,SAAA,EACxBD,EAAAA,EAAAA,KAACF,EAAU,KACXM,EAAAA,EAAAA,MAAA,OAAKG,UAAU,eAAcN,SAAA,EAC3BD,EAAAA,EAAAA,KAAA,QAAAC,SAAM,eACND,EAAAA,EAAAA,KAAC4B,EAAY,CAACnB,MAAOa,EAAUZ,aAAca,WAGjDvB,EAAAA,EAAAA,KAAC6B,EAAAA,GAAM,IACgB,MAAtB3D,EAASO,WACRuB,EAAAA,EAAAA,KAAC8B,EAAAA,IAAM,CACLvB,UAAU,wBACVwB,KAAM,GACNC,QAASA,IAAMf,EAAS,SAGxB,C","sources":["components/hooks/useBreadcrumb.js","components/UI/Breadcrumb.js","components/UI/ToggleSwitch.js","components/UI/Layout.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst useBreadcrumb = () => {\r\n  const location = useLocation();\r\n  const [paths, setPaths] = useState({});\r\n\r\n  const processPath = (path) => {\r\n    return path\r\n      .split(\"-\")\r\n      ?.map(\r\n        (p) =>\r\n          p.charAt(0).toUpperCase() + p.trimEnd().slice(1).toLocaleLowerCase()\r\n      )\r\n      .join(\" \");\r\n  };\r\n\r\n  useEffect(() => {\r\n    const completePath = location.pathname.split(\"/\").filter((d) => d);\r\n    const tempPaths = { Home: \"/\" };\r\n    completePath?.forEach((path, i) => {\r\n      const tillPath = completePath.slice(0, i + 1);\r\n      const processedPath = processPath(path);\r\n      tempPaths[processedPath] = \"/\" + tillPath.join(\"/\");\r\n    });\r\n    setPaths(tempPaths);\r\n  }, [location.pathname]);\r\n  return {paths}\r\n};\r\n\r\nexport default useBreadcrumb;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport useBreadcrumb from \"../hooks/useBreadcrumb\";\r\n\r\nconst Breadcrumb = () => {\r\n  const {paths} = useBreadcrumb()\r\n  return (\r\n    <div>\r\n      {Object.keys(paths)?.map((path, i) => {\r\n        return (\r\n          <span>\r\n            <Link to={paths[path]} className=\"breadcrumb\">\r\n              {path}\r\n            </Link>\r\n            {\" > \"}\r\n          </span>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Breadcrumb;\r\n","import React from \"react\";\r\nimport '../styles/ToggleSwitch.scss'\r\n\r\nconst ToggleSwitch = ({ value, handleChange }) => {\r\n  const internalHandleChange = () => {\r\n    handleChange(!value)\r\n  };\r\n  return (\r\n    <label className=\"switch\">\r\n      <input type=\"checkbox\" checked={value} onChange={internalHandleChange} />\r\n      <span className=\"slider round\"></span>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default ToggleSwitch;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { BiHome } from \"react-icons/bi\";\r\nimport { Outlet, useLocation, useNavigate } from \"react-router-dom\";\r\nimport Breadcrumb from \"./Breadcrumb\";\r\nimport ToggleSwitch from \"./ToggleSwitch\";\r\n\r\nconst Layout = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const initialDarkMode = localStorage.getItem(\"dark-mode\") ?? false;\r\n  const [darkMode, setDarkMode] = useState(initialDarkMode);\r\n\r\n  useEffect(() => {\r\n    document.documentElement.setAttribute(\r\n      \"data-theme\",\r\n      darkMode ? \"dark\" : \"light\"\r\n    );\r\n    localStorage.setItem(\"dark-mode\", darkMode);\r\n  }, [darkMode]);\r\n\r\n  return (\r\n    <div className=\"gap-bottom\">\r\n      <header className=\"header\">\r\n        <Breadcrumb />\r\n        <div className=\"toggle-group\">\r\n          <span>Dark Mode</span>\r\n          <ToggleSwitch value={darkMode} handleChange={setDarkMode} />\r\n        </div>\r\n      </header>\r\n      <Outlet />\r\n      {location.pathname !== \"/\" && (\r\n        <BiHome\r\n          className=\" home-btn quiz-button\"\r\n          size={20}\r\n          onClick={() => navigate(\"/\")}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n"],"names":["useBreadcrumb","location","useLocation","paths","setPaths","useState","useEffect","completePath","pathname","split","filter","d","tempPaths","Home","forEach","path","i","tillPath","slice","processedPath","_path$split","map","p","charAt","toUpperCase","trimEnd","toLocaleLowerCase","join","processPath","Breadcrumb","_Object$keys","_jsx","children","Object","keys","_jsxs","Link","to","className","_ref","value","handleChange","type","checked","onChange","internalHandleChange","Layout","_localStorage$getItem","navigate","useNavigate","initialDarkMode","localStorage","getItem","darkMode","setDarkMode","document","documentElement","setAttribute","setItem","ToggleSwitch","Outlet","BiHome","size","onClick"],"sourceRoot":""}